name: Released

on:
  pull_request:
    branches: 'release'

jobs:
  check-version:
    if: |
      github.event.action == 'opened' || github.event.action == 'reopened'

    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        run: |
          echo "::set-env name=VERSION::${{ github.event.pull_request.head.ref }}"

      - name: Clone the branch
        run: |
          git clone --branch=$VERSION --depth=1 ${{ github.repositoryUrl }} .

      - name: Get the live package version
        run: |
          repoName=$(awk '/name/ { print $3 }' RS=',\n' package.json)
          packageVer=$(npm view ${repoName//\"/} version)

          echo "::set-env name=PACKAGE_VER::$packageVer"

      - name: Check that the version is not the same as the live package version
        run: |
          [[ $VERSION != $PACKAGE_VER ]]

      - name: Check that the version is a valid semver string
        run: |
          npx semver $VERSION

      - name: Check that the version is greater than the live package version
        run: |
          sorted=$(npx semver $VERSION $PACKAGE_VER)

          checkSort="$PACKAGE_VER
          $VERSION"

          echo Sorted:
          echo $sorted
          echo
          echo Checked Sort:
          echo $checkSort

          # Verify that the order is correct
          [[ $sorted == $checkSort ]]

  #test:
    #if: |
      #github.event.action == 'synchronize'

    #runs-on: ubuntu-latest

    #steps:
      #- name: Checkout the head branch
        #run: |
          #git clone --branch=${{ github.event.pull_request.head.ref }} --depth=1 ${{ github.repositoryUrl }} .

      #- name: Setup Node.js
        #uses: actions/setup-node@v1
        #with:
          #node-version: 13.x

      #- name: Test
        #run: |
          #npm test
        #env:
          #CI: true

  publish:
    if: |
      github.event.action == 'closed' && github.event.merged == 'true'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout the release branch
        run: |
          git clone --branch=release --depth=1 ${{ github.repositoryUrl }} .

      - name: Initialize docs directory
        run: |
          rm -rf docs/*
          git clone --depth=1 --branch=master ${{ github.repositoryUrl }} docs
          rm -rf docs/*

      - name: Generate docs
        run: |
          npm ci
          npm run gen-docs

      - name: Set version on release branch and push
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@noreply.github.com

          tag=$(npm version ${{ github.event.pull_request.head.ref }})
          echo "::set-env name=VERSION::$tag"

          git push https://${{ github.actor }}:${{ secrets.re_push }}@github.com/${{ github.repository }}.git release
          git push $tag

      - name: Publish
        run: |
          npm config set '//registry.npmjs.org/:_authToken' "${{ secrets.npm_token }}"
          npm publish

      - name: Update the live docs
        run: |
          cd docs
          git add --all
          git commit -m "Updated docs"
          git push

